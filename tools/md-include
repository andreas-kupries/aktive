#!/usr/bin/env tclsh
# ------------------------------------------------------------------------------
package require fileutil

proc main {} {
    do [lsort -dict $::argv]
}

proc do {paths} {
    foreach path $paths { do-file $path }
}

proc do-file {path} {
    puts "processing $path ..."
    
    set path  [file normalize $path]    
    lappend   chain $path
    fileutil::writeFile $path [resolve $path $chain]
}

proc resolve {path chain} {
    join [lmap line [split [fileutil::cat $path] \n] {
	if {[string match "!include *" $line]} {
	    # whole line replacement by included file
	    puts "  $line"
	    set include [find $path [lindex $line 1]]
	    if {$include in $chain} {
		return -code error "Inclusion cycle for $include via [join $chain {-> }]"
	    }
	    lappend chain $include
	    resolve $include $chain
	} elseif {[regexp {(<!include: [^>]*>)} $line]} {
	    puts "  $line"
	    # in-line inclusion, replace part of the line
	    # do not recurse
	    set start 0
	    set matches {}
	    while {[regexp -start $start -indices {(<!include: [^>]*>)} $line -> match]} {
		#puts "    $match"
		lappend matches $match
		set start [lindex $match end]
	    }
	    #puts "(($matches)) :: /$line/"
	    # work from the back, this keeps the indices correct as replacements happen.
	    foreach match [lreverse $matches] {
		set cmd [string range $line {*}$match]
		puts "    ($cmd)@($match)"
		regexp {<!include: ([^>]*)>} $cmd -> include
		set include [find $path $include]
		#puts i(($include))
		set include [string map [list \n { }] [string trim [fileutil::cat $include]]]
		while {$include ne [set new [string map {
		    {        } { }
		    {       } { }
		    {      } { }
		    {     } { }
		    {    } { }
		    {   } { }
		    {  } { }
		} $include]]} {
		    set include $new
		}
		#puts r(($include))
		set line [string replace $line {*}$match $include]
	    }
	    set line
	} else {
	    set line
	}
    }] \n
}

proc find {includer path} {
    foreach dir [list [file dirname $includer] [pwd]] {
	set maybe [file normalize [file join $dir $path]]

	puts "    checking: $maybe"
	
	if {[file exists $maybe]} {
	    return $maybe
	}
    }
    return -code error "include file $path not found"
}

main
exit
# ------------------------------------------------------------------------------
