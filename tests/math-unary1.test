# -*- tcl -*- tcl.tk//DSL tcltest//EN//2.0 tcl.tk//DSL tcltest//EN//2.0
## (c) 2023 Andreas Kupries
# # ## ### ##### ######## ############# #####################
## AKTIVE. Unary transformers with a single parameter

kt check Tcl     8.6
kt check tcltest 2

# # ## ### ##### ######## ############# #####################

kt local testing aktive

kt source support/util.tcl

# # ## ### ##### ######## ############# #####################
## Syntax

syntax {
    atan2          {x src}
    atan2b         {y src}
    eq             {threshold src}
    expx           {base src}
    ge             {threshold src}
    gt             {threshold src}
    hypot          {y src}
    le             {threshold src}
    lt             {threshold src}
    max            {min src}
    min            {max src}
    mod            {modulus src}
    modb           {numerator src}
    ne             {threshold src}
    neg-shift      {offset src}
    pow            {exponent src}
    reciproc-scale {factor src}
    scale          {factor src}
    shift          {offset src}
    solarize       {threshold src}
} {aktive op math1}

# # ## ### ##### ######## ############# #####################
## Basic testing (result sampling, basic const-folding simplification)

foreach {fun steps first last param pname expected} {
    atan2           7 -3 3 2.0 x         {-0.98279 -0.7854 -0.46365 0 0.46365 0.7854 0.98279}
    atan2b          7 -3 3 2.0 y         {2.55359 2.35619 2.03444 1.57080 1.10715 0.78540 0.58800}
    eq              7 -3 3 2.0 threshold {0 0 0 0 0 1 0}
    expx            7 -3 3 2.0 base      {0.125 0.25 0.5 1 2 4 8}
    ge              7 -3 3 2.0 threshold {0 0 0 0 0 1 1}
    gt              7 -3 3 2.0 threshold {0 0 0 0 0 0 1}
    hypot           7 -3 3 2.0 y         {3.60555 2.82843 2.23607 2 2.23607 2.82843 3.60555}
    le              7 -3 3 2.0 threshold {1 1 1 1 1 1 0}
    lt              7 -3 3 2.0 threshold {1 1 1 1 1 0 0}
    max             7 -3 3 2.0 min       {2 2 2 2 2 2 3}
    min             7 -3 3 2.0 max       {-3 -2 -1 0 1 2 2}
    mod             7 -3 3 2.0 modulus   {-1 -0 -1 0 1 0 1}
    modb            7  1 7 2.0 numerator {0 0 2 2 2 2 2}
    ne              7 -3 3 2.0 threshold {1 1 1 1 1 0 1}
    neg-shift       7 -3 3 2.0 offset    {5 4 3 2 1 0 -1}
    pow             7 -3 3 2.0 exponent  {9 4 1 0 1 4 9}
    reciproc-scale  4 -3 3 2.0 factor    {-0.66667 -2 2 0.66667}
    scale           7 -3 3 2.0 factor    {-6 -4 -2 0 2 4 6}
    shift           7 -3 3 2.0 offset    {-1 0 1 2 3 4 5}
    solarize        7 -3 3 1.5 threshold {-3 -2 -1 0 1 -1 -2}
} {
    if {$steps eq "."} continue ;# skip undefined parts

    # puts   "\nXX $fun ........................................................................"
    # puts   "XX INPUT [dict get [astcl aktive image gradient $steps 1 1 $first $last] pixels]"
    # puts   "XX RESLT [dict get [astcl aktive op math1 $fun [aktive image gradient $steps 1 1 $first $last]] pixels]"
    # puts   "XX EXP.. $expected\n"

    test aktive-op-math1-${fun}-2.0 "aktive op math1 $fun (\[$first $last]/$steps)" -body {
	astcl aktive op math1 {*}$fun $param [aktive image gradient $steps 1 1 $first $last]
    } -match image -result [makei op::math1::$fun 0 0 $steps 1 1 [list $pname $param] $expected]

    test aktive-op-math1-${fun}-2.1 "aktive op math1 $fun, dag" -body {
	dag aktive op math1 {*}$fun $param [aktive image gradient $steps 1 1 $first $last]
    } -match glob -result "op::math1::$fun * {*} {image::gradient *}"

    test aktive-op-math1-${fun}-2.2 "aktive op math1 $fun, const folding, dag" -body {
	dag aktive op math1 {*}$fun $param [flat 5]
    } -match glob -result {image::constant *}
}

# # ## ### ##### ######## ############# #####################
## Simplifier rules for passing the input

foreach {fun param inconst} {
    expx           1 1.0
    pow            0 1.0
    pow            1 0.0
    reciproc-scale 1 1.0
    scale          0 0.0
    hypot          0 0.0
} {
    set in [flat $inconst]
    set id [aktive query id $in]

    test aktive-op-math1-${fun}-3.0-${param}-$inconst "aktive op math1 $fun, pass through simplifications" -body {
	dag aktive op math1 {*}$fun $param $in
    } -match glob -result "image::constant $id {* value $inconst}"

    unset in id
}

foreach {fun param} {
    pow   1
    scale 1
    shift 0
} {
    set in [grad]
    set id [aktive query id $in]

    test aktive-op-math1-${fun}-4.0 "aktive op math1 $fun, pass through simplifications" -body {
	dag aktive op math1 {*}$fun $param $in
    } -match glob -result "image::gradient $id *"

    unset in id
}

# # ## ### ##### ######## ############# #####################
## More simplifications without pass through

foreach {k param inconst} {
    0 0 0
    1 1 0
} {
    test aktive-op-math1-reciproc-scale-5.$k "aktive op math1 reciproc-scale, simplifications" -body {
	dag aktive op math1 reciproc-scale $param [flat $inconst]
    } -match glob -result "image::constant * {* value Inf}"
}

test aktive-op-math1-expx-5.2 "aktive op math1 expx, simplifications" -body {
    dag aktive op math1 expx 22 [flat 0]
} -match glob -result "image::constant * {* value 1.0}"

test aktive-op-math1-hypot-5.2.0 "aktive op math1 hypot, simplifications" -body {
    dag aktive op math1 hypot 0 [grad]
} -match glob -result "op::math1::abs * {} {image::gradient *}"

test aktive-op-math1-hypot-5.2.1 "aktive op math1 hypot, simplifications" -body {
    dag aktive op math1 hypot -5 [flat 0]
} -match glob -result "image::constant * {* value 5.0}"

foreach {k fun param rfun} {
    0 neg-shift      0 neg
    1 neg-shift      1 invert
    2 reciproc-scale 1 reciproc
} {
    test aktive-op-math1-${fun}-6.$k "aktive op math1 $fun, simplifications" -body {
	dag aktive op math1 $fun $param [grad]
    } -match glob -result "op::math1::$rfun *"
}

foreach {fun param rconst} {
    scale 0 0.0
    pow   0 1.0
} {
    test aktive-op-math1-${fun}-7.0 "aktive op math1 $fun, simplifications" -body {
	dag aktive op math1 $fun $param [grad]
    } -match glob -result "image::constant * {* value $rconst}"
}

# # ## ### ##### ######## ############# #####################
## Chain reductions
#
## For the rules see `Chains:` in
#
## - etc/transformer/simpler/aktive_nshift.rules
## - etc/transformer/simpler/aktive_rscale.rules
## - etc/transformer/simpler/aktive_scale.rules
## - etc/transformer/simpler/aktive_shift.rules
## - etc/transformer/simpler/cbrt.rules
## - etc/transformer/simpler/pow.rules
## - etc/transformer/simpler/sqrt.rules

foreach {funb      pb funa           pa   xxx   rfun           rdetail} {
    cbrt           {} cbrt           {}   -->   pow            {exponent 0.1111*}
    cbrt           {} pow             6   -->   pow            {exponent 2.0}
    cbrt           {} sqrt           {}   -->   pow            {exponent 0.1666*}
    neg-shift      10 neg-shift       8   -->   shift          {offset 2.0}
    neg-shift      10 shift           8   -->   neg-shift      {offset 2.0}
    pow             2 pow             3   -->   pow            {exponent 6.0}
    pow             6 cbrt           {}   -->   pow            {exponent 2.0}
    pow             6 sqrt           {}   -->   pow            {exponent 3.0}
    reciproc-scale 10 reciproc-scale  2   -->   scale          {factor 5.0}
    reciproc-scale 10 scale           2   -->   reciproc-scale {factor 5.0}
    scale           5 reciproc-scale  2   -->   reciproc-scale {factor 10.0}
    scale           5 scale           2   -->   scale          {factor 10.0}
    shift          10 neg-shift       5   -->   neg-shift      {offset 15.0}
    shift          10 shift           5   -->   shift          {offset 15.0}
    sqrt           {} cbrt           {}   -->   pow            {exponent 0.1666*}
    sqrt           {} pow             6   -->   pow            {exponent 3.0}
    sqrt           {} sqrt           {}   -->   pow            {exponent 0.25}
    ceil           {} floor          {}   -->   floor          {}
    floor          {} ceil           {}   -->   ceil           {}
} {
    test aktive-op-math1-${funb}-chain-${funa}-8.0 "aktive op math1 $funb/$funa, chain simplifications" -body {
	dag aktive op math1 $funb {*}$pb [aktive op math1 $funa {*}$pa [grad]]
    } -match glob -result "*::$rfun * {$rdetail} *"
}

# # ## ### ##### ######## ############# #####################
cleanupTests
return
