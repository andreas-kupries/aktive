# -*- tcl -*- tcl.tk//DSL tcltest//EN//2.0 tcl.tk//DSL tcltest//EN//2.0
## (c) 2023,2024 Andreas Kupries
# # ## ### ##### ######## ############# #####################
## NETPBM. Reading NETPBM

kt check Tcl     8.6 9
kt check tcltest 2

# # ## ### ##### ######## ############# #####################

kt local testing aktive

kt source support/util.tcl

# # ## ### ##### ######## ############# #####################
## Syntax

syntax {
    netpbm args
} {aktive read from}

# # ## ### ##### ######## ############# #####################
##
## NYI TODO text/etext formats

set bands {
    .pgm {1 gray}
    .ppm {3 sRGB}
}
set maxv {
    byte  255
    short 65535
    color 255
    feep  15
}

# Note: The conversion from double to uint when writing the asset files introduced quantization
#       errors, which is why the read values differ from the original graybox/colorbox data.  As
#       uint16_t provides for finer granularity the errors are actually not as much as for uint8_t,
#       and also the reason why the two forms come with their own expected pixels.

foreach {k name expected} {
    0 byte.pgm {
	= 0      0.0157 0.0314 0.0471 0.0627 0.0784 0.0941 0.1098
	= 0.1255 0.1412 0.1569 0.1725 0.1882 0.2039 0.2196 0.2353
	= 0.2510 0.2667 0.2824 0.2980 0.3137 0.3333 0.3490 0.3647
	= 0.3804 0.3961 0.4118 0.4275 0.4431 0.4588 0.4745 0.4902
	= 0.5059 0.5216 0.5373 0.5529 0.5686 0.5843 0.6000 0.6157
	= 0.6314 0.6471 0.6667 0.6824 0.6980 0.7137 0.7294 0.7451
	= 0.7608 0.7765 0.7922 0.8078 0.8235 0.8392 0.8549 0.8706
	= 0.8863 0.9020 0.9176 0.9333 0.9490 0.9647 0.9804 1
    }
    1 short.pgm {
	= 0      0.0159 0.0317 0.0476 0.0635 0.0794 0.0952 0.1111
	= 0.1270 0.1429 0.1587 0.1746 0.1905 0.2063 0.2222 0.2381
	= 0.2540 0.2698 0.2857 0.3016 0.3174 0.3333 0.3492 0.3651
	= 0.3809 0.3968 0.4127 0.4286 0.4444 0.4603 0.4762 0.4921
	= 0.5079 0.5238 0.5397 0.5556 0.5714 0.5873 0.6032 0.6190
	= 0.6349 0.6508 0.6667 0.6825 0.6984 0.7143 0.7301 0.7460
	= 0.7619 0.7778 0.7936 0.8095 0.8254 0.8413 0.8571 0.8730
	= 0.8889 0.9048 0.9206 0.9365 0.9524 0.9682 0.9841 1
    }
    2 byte.ppm {
	= 0      0.8863 1      = 0.0157 0.7608 0.9804 = 0.0314 0.6314 0.9647 = 0.0471 0.5059 0.9490
	= 0.0627 0.3804 0.9333 = 0.0784 0.2510 0.9176 = 0.0941 0.1255 0.9020 = 0.1098 0      0.8863
	= 0.1255 0.9020 0.8706 = 0.1412 0.7765 0.8549 = 0.1569 0.6471 0.8392 = 0.1725 0.5216 0.8235
	= 0.1882 0.3961 0.8078 = 0.2039 0.2667 0.7922 = 0.2196 0.1412 0.7765 = 0.2353 0.0157 0.7608
	= 0.2510 0.9176 0.7451 = 0.2667 0.7922 0.7294 = 0.2824 0.6667 0.7137 = 0.2980 0.5373 0.6980
	= 0.3137 0.4118 0.6824 = 0.3333 0.2824 0.6667 = 0.3490 0.1569 0.6471 = 0.3647 0.0314 0.6314
	= 0.3804 0.9333 0.6157 = 0.3961 0.8078 0.6000 = 0.4118 0.6824 0.5843 = 0.4275 0.5529 0.5686
	= 0.4431 0.4275 0.5529 = 0.4588 0.2980 0.5373 = 0.4745 0.1725 0.5216 = 0.4902 0.0471 0.5059
	= 0.5059 0.9490 0.4902 = 0.5216 0.8235 0.4745 = 0.5373 0.6980 0.4588 = 0.5529 0.5686 0.4431
	= 0.5686 0.4431 0.4275 = 0.5843 0.3137 0.4118 = 0.6000 0.1882 0.3961 = 0.6157 0.0627 0.3804
	= 0.6314 0.9647 0.3647 = 0.6471 0.8392 0.3490 = 0.6667 0.7137 0.3333 = 0.6824 0.5843 0.3137
	= 0.6980 0.4588 0.2980 = 0.7137 0.3333 0.2824 = 0.7294 0.2039 0.2667 = 0.7451 0.0784 0.2510
	= 0.7608 0.9804 0.2353 = 0.7765 0.8549 0.2196 = 0.7922 0.7294 0.2039 = 0.8078 0.6000 0.1882
	= 0.8235 0.4745 0.1725 = 0.8392 0.3490 0.1569 = 0.8549 0.2196 0.1412 = 0.8706 0.0941 0.1255
	= 0.8863 1      0.1098 = 0.9020 0.8706 0.0941 = 0.9176 0.7451 0.0784 = 0.9333 0.6157 0.0627
	= 0.9490 0.4902 0.0471 = 0.9647 0.3647 0.0314 = 0.9804 0.2353 0.0157 = 1      0.1098 0
    }
    3 short.ppm {
	= 0      0.8889 1      = 0.0159 0.7619 0.9841 = 0.0317 0.6349 0.9682 = 0.0476 0.5079 0.9524
	= 0.0635 0.3809 0.9365 = 0.0794 0.2540 0.9206 = 0.0952 0.1270 0.9048 = 0.1111 0      0.8889
	= 0.1270 0.9048 0.8730 = 0.1429 0.7778 0.8571 = 0.1587 0.6508 0.8413 = 0.1746 0.5238 0.8254
	= 0.1905 0.3968 0.8095 = 0.2063 0.2698 0.7936 = 0.2222 0.1429 0.7778 = 0.2381 0.0159 0.7619
	= 0.2540 0.9206 0.7460 = 0.2698 0.7936 0.7301 = 0.2857 0.6667 0.7143 = 0.3016 0.5397 0.6984
	= 0.3174 0.4127 0.6825 = 0.3333 0.2857 0.6667 = 0.3492 0.1587 0.6508 = 0.3651 0.0317 0.6349
	= 0.3809 0.9365 0.6190 = 0.3968 0.8095 0.6032 = 0.4127 0.6825 0.5873 = 0.4286 0.5556 0.5714
	= 0.4444 0.4286 0.5556 = 0.4603 0.3016 0.5397 = 0.4762 0.1746 0.5238 = 0.4921 0.0476 0.5079
	= 0.5079 0.9524 0.4921 = 0.5238 0.8254 0.4762 = 0.5397 0.6984 0.4603 = 0.5556 0.5714 0.4444
	= 0.5714 0.4444 0.4286 = 0.5873 0.3174 0.4127 = 0.6032 0.1905 0.3968 = 0.6190 0.0635 0.3809
	= 0.6349 0.9682 0.3651 = 0.6508 0.8413 0.3492 = 0.6667 0.7143 0.3333 = 0.6825 0.5873 0.3174
	= 0.6984 0.4603 0.3016 = 0.7143 0.3333 0.2857 = 0.7301 0.2063 0.2698 = 0.7460 0.0794 0.2540
	= 0.7619 0.9841 0.2381 = 0.7778 0.8571 0.2222 = 0.7936 0.7301 0.2063 = 0.8095 0.6032 0.1905
	= 0.8254 0.4762 0.1746 = 0.8413 0.3492 0.1587 = 0.8571 0.2222 0.1429 = 0.8730 0.0952 0.1270
	= 0.8889 1      0.1111 = 0.9048 0.8730 0.0952 = 0.9206 0.7460 0.0794 = 0.9365 0.6190 0.0635
	= 0.9524 0.4921 0.0476 = 0.9682 0.3651 0.0317 = 0.9841 0.2381 0.0159 = 1      0.1111 0
    }
    4 24,7/feep.pgm {
	= 0 0   0   0   0   0 0 0      0      0      0      0 0 0      0      0      0      0 0 0 0 0 0 0
	= 0 0.2 0.2 0.2 0.2 0 0 0.4667 0.4667 0.4667 0.4667 0 0 0.7333 0.7333 0.7333 0.7333 0 0 1 1 1 1 0
	= 0 0.2 0   0   0   0 0 0.4667 0      0      0      0 0 0.7333 0      0      0      0 0 1 0 0 1 0
	= 0 0.2 0.2 0.2 0   0 0 0.4667 0.4667 0.4667 0      0 0 0.7333 0.7333 0.7333 0      0 0 1 1 1 1 0
	= 0 0.2 0   0   0   0 0 0.4667 0      0      0      0 0 0.7333 0      0      0      0 0 1 0 0 0 0
	= 0 0.2 0   0   0   0 0 0.4667 0.4667 0.4667 0.4667 0 0 0.7333 0.7333 0.7333 0.7333 0 0 1 0 0 0 0
	= 0 0   0   0   0   0 0 0      0      0      0      0 0 0      0      0      0      0 0 0 0 0 0 0
    }
    5 3,2/color.ppm {
	1   0   0	0   1   0	0   0   1
	1   1   0	1   1   1	0   0   0
    }
} {
    if {[string match */* $name]} {
	lassign [split $name /] dim name
	lassign [split $dim ,] w h
	set rpath [A $name]
    } else {
	lassign {8 8} w h
	set rpath [R format-$name]
    }

    set type [file rootname $name]
    lassign  [dict get $bands [file extension $name]] depth colors

    set config [dict create path $rpath]
    set meta {}
    dict set meta netpbm maxval [dict get $maxv $type]
    dict set meta path $rpath
    dict set meta colorspace $colors

    test aktive-read-from-netpbm-2.$k-${type}-$depth "aktive read from netpbm ($type, depth $depth)" -body {
	astcl aktive read from netpbm path $rpath
    } -match image -result [makei read::from::netpbm 0 0 $w $h $depth $config $expected $meta]

    unset type depth colors rpath config meta
}

# # ## ### ##### ######## ############# #####################
unset bands k name expected
cleanupTests
return
