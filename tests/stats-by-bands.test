# -*- tcl -*- tcl.tk//DSL tcltest//EN//2.0 tcl.tk//DSL tcltest//EN//2.0
## (c) 2023,2024 Andreas Kupries
# # ## ### ##### ######## ############# #####################
## AKTIVE. Band statistics (min, max, mean, sum, sum squared, variance, std deviation)

kt check Tcl     8.6 9
kt check tcltest 2

# # ## ### ##### ######## ############# #####################

kt local testing aktive

kt source support/util.tcl

# # ## ### ##### ######## ############# #####################
## Syntax

syntax {
    max        src
    mean       src
    median     src
    min        src
    rank      {src args}
    stddev     src
    sum        src
    sumsquared src
    variance   src
} {aktive op band}

syntax {
    ge    {src0 src1}
    gt    {src0 src1}
    le    {src0 src1}
    lt    {src0 src1}
    max    src
    min    src
} {aktive op band arg}

# # ## ### ##### ######## ############# #####################
##
## =  1  1.5 =  2  2.5 =  3  3.5
## =  4  4.5 =  5  5.5 =  6  6.5
## =  7  7.5 =  8  8.5 =  9  9.5
## = 10 10.5 = 11 11.5 = 12 12.5

foreach {op config expected} {
    arg.min {} {
	0 0 0
	0 0 0
	0 0 0
	0 0 0
    }
    arg.max {} {
	1 1 1
	1 1 1
	1 1 1
	1 1 1
    }
    max {} {
	=  1.5  2.5  3.5
	=  4.5  5.5  6.5
	=  7.5  8.5  9.5
	= 10.5 11.5 12.5
    }
    mean {} {
	=  1.25  2.25  3.25
	=  4.25  5.25  6.25
	=  7.25  8.25  9.25
	= 10.25 11.25 12.25
    }
    median {rank -1} {
	=  1.5  2.5  3.5
	=  4.5  5.5  6.5
	=  7.5  8.5  9.5
	= 10.5 11.5 12.5
    }
    min {} {
	=  1  2  3
	=  4  5  6
	=  7  8  9
	= 10 11 12
    }
    {rank rank 0} {rank 0} {
	=  1  2  3
	=  4  5  6
	=  7  8  9
	= 10 11 12
    }
    stddev {} {
	= 0.25 0.25 0.25
	= 0.25 0.25 0.25
	= 0.25 0.25 0.25
	= 0.25 0.25 0.25
    }
    sum {} {
	=  2.5  4.5  6.5
	=  8.5 10.5 12.5
	= 14.5 16.5 18.5
	= 20.5 22.5 24.5
    }
    sumsquared {} {
	=   3.25  10.25  21.25
	=  36.25  55.25  78.25
	= 105.25 136.25 171.25
	= 210.25 253.25 300.25
    }
    variance {} {
	= 0.0625 0.0625 0.0625
	= 0.0625 0.0625 0.0625
	= 0.0625 0.0625 0.0625
	= 0.0625 0.0625 0.0625
    }
} {
    set params [lassign $op op]
    set op [split $op .]
    set actual $op
    if {$op eq "median"} { set actual rank }
    if {[llength $actual] > 1} { set actual [join $actual ::] }

    test aktive-op-band-${op}-2.0 "aktive op band $op" -body {
	astcl aktive op band {*}$op [grad] {*}$params
    } -match image -result [makei op::band::$actual 0 0 3 4 1 $config $expected]

    test aktive-op-band-${op}-2.1 "aktive op band $op, dag" -body {
	dag aktive op band {*}$op [grad] {*}$params
    } -match glob -result "op::band::$actual * {image::gradient *}"

    if {$op in {
	max min mean sum median
    }} {
	# confirm idempotent operations, and simplifications.
	#
	# confirming that our claim of idempotency is true is difficult in the face of the new
	# simplification rule which does elide the operation for any 1-band image it encounters.
	#
	# `op pass` is not enough anymore to stop simplification. It only stops the detection of
	# chained operations. Even materialization is not enough, as it also is an 1-band image
	# triggering elision. Only fully disabling simplification will work. For this we have to
	# poke into the package internals and use the special flag just for this.
	#
	# confirm idem potency with actual operation chain
	# - simplifications are off to prevent it from changing the dag on us.

        test aktive-op-band-${op}-2.2 "aktive op band $op, idem potent" -setup {
	    set aktive::simplify::__off__ 1
	} -cleanup {
	    unset aktive::simplify::__off__
	} -body {
	    astcl aktive op band $op \
		[aktive op band $op [grad] \
		     {*}$params] \
		{*}$params
	} -match image -result [makei op::band::$actual 0 0 3 4 1 $config $expected]

	# confirm that simplifications elide operation chain as desired

	set in [aktive op band $op [grad]]
	set id [aktive query id $in]

        test aktive-op-band-${op}-2.3 "aktive op band $op, reduction 1, dag" -body {
	    dag aktive op band $op $in {*}$params
	} -match glob -result "op::band::$actual $id {$config} {image::gradient *}"

	# confirm that simplifications elide operation for any 1-band image used as input.

        test aktive-op-band-${op}-2.4 "aktive op band $op, reduction 2, dag" -body {
	    dag aktive op band $op [aktive op select z [grad] from 0] {*}$params
	} -match glob -result "op::select::z * {from 0 to 0} {image::gradient *}"

	unset in id
    }

    if {$op in {
	sumsquared
    }} {
	# confirm squarings, and simplifications

        test aktive-op-band-${op}-2.2 "aktive op band $op, chain squared" -body {
	    pixels aktive op band $op \
		[aktive op pass \
		     [aktive op band $op [grad] \
			  {*}$params]] \
		{*}$params
	} -match pixels -result [pixels aktive op math1 pow [aktive op band $op [grad]] exponent 2]
	# squared (makei op::band::$actual 0 0 3 4 1 {} $expected)

        test aktive-op-band-${op}-2.3 "aktive op band $op, chain squared twice" -body {
	    pixels aktive op band $op \
		[aktive op pass \
		     [aktive op band $op  \
			  [aktive op pass \
			       [aktive op band $op [grad] \
				    {*}$params]] \
			  {*}$params]] \
		{*}$params
	} -match pixels -result [pixels aktive op math1 pow [aktive op band $op [grad]] exponent 4]
	# double squared ( [makei op::band::$actual 0 0 3 4 1 {} $expected])

	test aktive-op-band-${op}-2.4 "aktive op band $op, squared, reduced, dag" -body {
	    dag aktive op band $op [aktive op band $op [grad] {*}$params] {*}$params
	} -match glob -result "op::math1::pow * {exponent 2.0} {op::band::$actual * {} {image::gradient *}}"

        test aktive-op-band-${op}-2.5 "aktive op band $op, squared 2x, reduced, dag" -body {
	    dag aktive op band $op \
		[aktive op band $op  \
		     [aktive op band $op [grad] \
			  {*}$params] \
		     {*}$params] \
		{*}$params
	} -match glob -result "op::math1::pow * {exponent 4.0} {op::band::$actual * {} {image::gradient *}}"
    }

    if {$op in {
	variance stddev
    }} {
	# confirm const results, and simplifications

        test aktive-op-band-${op}-2.2 "aktive op band $op, chain const" -body {
	    pixels aktive op band $op \
		[aktive op pass \
		     [aktive op band $op [grad] \
			  {*}$params]] \
		{*}$params
	} -match pixels -result [pixels aktive image from value width 3 height 4 depth 1 value 0]

	test aktive-op-band-${op}-2.3 "aktive op band $op, chain const, reduced dag" -body {
	    dag aktive op band $op \
		[aktive op band $op [grad] \
		     {*}$params] \
		{*}$params
	} -match glob -result "image::from::value * {width 3 height 4 depth 1 value 0.0}"
    }
}

# # ## ### ##### ######## ############# #####################

proc t {} { aktive image gradient width 5 height 1 depth 1 first 5 last 21 }
proc d {} { aktive image gradient width 5 height 1 depth 5 first 1 last 25 }

# # ## ### ##### ######## ############# #####################
##
## d = (( 1 2 3 4 5   6 7 8 9 10   11 12 13 14 15   16 17 18 19 20   21 22 23 24 25 ))
## t = (( 5           9            13               17               21 ))
## / = (( 5 4 3 2 1   10 9 8 7 6   15 14 13 12 11   20 19 18 17 16   25 24 23 22 21 ))

foreach {op dcmd expected} {
    ge d { 4 3 2 1 0 }
    gt d { 5 4 3 2 1 }
    le e { 0 1 2 3 4 }
    lt e { 1 2 3 4 5 }
} {
    set t [t]
    set d [d]
    if {[string match l* $op]} { set d [aktive op flip z $d] }

    test aktive-op-band-${op}-2.0 "aktive op band $op" -body {
	astcl aktive op band arg $op $t $d
    } -match image -result [makei op::band::arg::$op 0 0 5 1 1 {} $expected]

    test aktive-op-band-${op}-2.1 "aktive op band $op, dag" -body {
	dag aktive op band arg $op $t $d
    } -match glob -result "op::band::arg::$op * {image::gradient *} {image::gradient *}"

    unset t d
}

# # ## ### ##### ######## ############# #####################
rename d {}
rename t {}
cleanupTests
return
