# -*- tcl -*- tcl.tk//DSL tcltest//EN//2.0 tcl.tk//DSL tcltest//EN//2.0
## (c) 2023 Andreas Kupries
# # ## ### ##### ######## ############# #####################
## AKTIVE. Row statistics (min, max, mean, sum, sum squared, variance, std deviation)

kt check Tcl     8.6
kt check tcltest 2

# # ## ### ##### ######## ############# #####################

kt local testing aktive

kt source support/util.tcl

# # ## ### ##### ######## ############# #####################
## Syntax

syntax {
    max        src
    mean       src
    median     src
    min        src
    rank      {src args}
    stddev     src
    sum        src
    sumsquared src
    variance   src
} {aktive op row}

# # ## ### ##### ######## ############# #####################
##
## =  1  1.5 =  2  2.5 =  3  3.5
## =  4  4.5 =  5  5.5 =  6  6.5
## =  7  7.5 =  8  8.5 =  9  9.5
## = 10 10.5 = 11 11.5 = 12 12.5

foreach {op config expected} {
    max {} {
	=  3  3.5 =
	=  6  6.5 =
	=  9  9.5 =
	= 12 12.5 =
    }
    mean {} {
	=  2  2.5 =
	=  5  5.5 =
	=  8  8.5 =
	= 11 11.5 =
    }
    median {rank -1} {
	=  2  2.5 =
	=  5  5.5 =
	=  8  8.5 =
	= 11 11.5 =
    }
    min {} {
	=  1  1.5 =
	=  4  4.5 =
	=  7  7.5 =
	= 10 10.5 =
    }
    {rank rank 0} {rank 0} {
	=  1  1.5 =
	=  4  4.5 =
	=  7  7.5 =
	= 10 10.5 =
    }
    stddev {} {
	= 0.8165 0.8165
	= 0.8165 0.8165
	= 0.8165 0.8165
	= 0.8165 0.8165
    }
    sum {} {
	=  6  7.5 =
	= 15 16.5 =
	= 24 25.5 =
	= 33 34.5 =
    }
    sumsquared {} {
	=  14  20.75 =
	=  77  92.75 =
	= 194 218.75 =
	= 365 398.75 =
    }
    variance {} {
	= 0.6667 0.6667
	= 0.6667 0.6667
	= 0.6667 0.6667
	= 0.6667 0.6667
    }
} {
    set params [lassign $op op]
    set actual $op
    if {$op eq "median"} { set actual rank }

    test aktive-op-row-${op}-2.0 "aktive op row $op" -body {
	astcl aktive op row $op [grad] {*}$params
    } -match image -result [makei op::row::$actual 0 0 1 4 2 $config $expected]

    test aktive-op-row-${op}-2.1 "aktive op row $op, dag" -body {
	dag aktive op row $op [grad] {*}$params
    } -match glob -result "op::row::$actual * {$config} {image::gradient *}"

    if {$op in {
	max min mean sum median
    }} {
	# confirm idempotent operations, and simplification
	#
	# confirming that our claim of idempotency is true is difficult in the face of the new
	# simplification rule which does elide the operation for any 1-column image it
	# encounters. `op pass` is not enough anymore to stop simplification. It only stops the
	# detection of chained operation. Even materialization is not enough, as it also is an
	# 1-band image triggering elision. Only fully disabling simplification will work.

	# confirm idem potency with actual operation chain
	# - simplifications are off to prevent it from changing the dag on us.

        test aktive-op-row-${op}-2.2 "aktive op row $op, idem potent" -setup {
	    set aktive::simplify::__off__ 1
	} -cleanup {
	    unset aktive::simplify::__off__
	} -body {
	    astcl aktive op row $op \
		[aktive op row $op [grad] \
		     {*}$params] \
		{*}$params
	} -match image -result [makei op::row::$actual 0 0 1 4 2 $config $expected]

	# confirm that simplifications elide operation chain as desired

	set in [aktive op row $op [grad]]
	set id [aktive query id $in]

        test aktive-op-row-${op}-2.3 "aktive op row $op, reduction 1, dag" -body {
	    dag aktive op row $op $in {*}$params
	} -match glob -result "op::row::$actual $id {$config} {image::gradient *}"

	# confirm that simplifications elide operation for any 1-column image used as input.

        test aktive-op-row-${op}-2.4 "aktive op row $op, reduction 2, dag" -body {
	    dag aktive op row $op [aktive op select x [grad] from 0] {*}$params
	} -match glob -result "op::select::x * {from 0 to 0} {image::gradient *}"

	unset in id
    }

    if {$op in {
	sumsquared
    }} {
	# confirm squarings, and simplifications

        test aktive-op-row-${op}-2.2 "aktive op row $op, chain squared" -body {
	    pixels aktive op row $op \
		[aktive op pass \
		     [aktive op row $op [grad] \
			  {*}$params]] \
		{*}$params
	} -match pixels -result [pixels aktive op math1 pow [aktive op row $op [grad]] exponent 2]
	# squared (makei op::row::$actual 0 0 1 4 2 {} $expected)

        test aktive-op-row-${op}-2.3 "aktive op row $op, chain squared twice" -body {
	    pixels aktive op row $op \
		[aktive op pass \
		     [aktive op row $op  \
			  [aktive op pass \
			       [aktive op row $op [grad] \
				    {*}$params]] \
			  {*}$params]] \
		{*}$params
	} -match pixels -result [pixels aktive op math1 pow [aktive op row $op [grad]] exponent 4]
	# double squared ( [makei op::row::$actual 0 0 1 4 2 {} $expected])

	test aktive-op-row-${op}-2.4 "aktive op row $op, squared, reduced, dag" -body {
	    dag aktive op row $op \
		[aktive op row $op [grad] \
		     {*}$params] \
		{*}$params
	} -match glob -result "op::math1::pow * {exponent 2.0} {op::row::$actual * {} {image::gradient *}}"

        test aktive-op-row-${op}-2.5 "aktive op row $op, squared 2x, reduced, dag" -body {
	    dag aktive op row $op \
		[aktive op row $op  \
		     [aktive op row $op [grad] \
			  {*}$params] \
		     {*}$params] \
		{*}$params
	} -match glob -result "op::math1::pow * {exponent 4.0} {op::row::$actual * {} {image::gradient *}}"
    }

    if {$op in {
	variance stddev
    }} {
	# confirm const results, and simplifications

        test aktive-op-row-${op}-2.2 "aktive op row $op, chain const" -body {
	    pixels aktive op row $op \
		[aktive op pass \
		     [aktive op row $op [grad] \
			  {*}$params]] \
		{*}$params
	} -match pixels -result [pixels aktive image from value width 1 height 4 depth 2 value 0]

	test aktive-op-row-${op}-2.3 "aktive op row $op, chain const, reduced dag" -body {
	    dag aktive op row $op \
		[aktive op row $op [grad] \
		     {*}$params] \
		{*}$params
	} -match glob -result "image::from::value * {width 1 height 4 depth 2 value 0.0}"
    }
}

# # ## ### ##### ######## ############# #####################
cleanupTests
return
