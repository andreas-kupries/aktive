# -*- tcl -*- tcl.tk//DSL tcltest//EN//2.0 tcl.tk//DSL tcltest//EN//2.0
## (c) 2023 Andreas Kupries
# # ## ### ##### ######## ############# #####################
## AKTIVE. Upsampling (stretching) rows, columns, bands

kt check Tcl     8.6
kt check tcltest 2

# # ## ### ##### ######## ############# #####################

kt local testing aktive

kt source support/util.tcl

# TODO :: Access unaligned to grid -- /select

# # ## ### ##### ######## ############# #####################
## Syntax

syntax {
    x {n fill src}
    y {n fill src}
    z {n fill src}
} {aktive op upsample}

# # ## ### ##### ######## ############# #####################
##
# input/gradient 3x4x2
##
##       0 ....   1......   2...... - 3 columns
##     --------  --------  --------
#	 1  1.5    2  2.5    3  3.5  0
#	 4  4.5    5  5.5    6  6.5  1
#	 7  7.5    8  8.5    9  9.5  2
#	10 10.5   11 11.5   12 12.5  3
##     --- ----  --- ----  --- ----  \ 4 rows
##      0. 1...   0. 1...   0. 1... - 2 bands
#
# Upsampling columns, rows, or bands

foreach {op w h d expected} {
    x 6 4 2 {
	=  1  1.5 = 0 0 =  2  2.5 = 0 0 =  3  3.5 = 0 0 =
	=  4  4.5 = 0 0 =  5  5.5 = 0 0 =  6  6.5 = 0 0 =
	=  7  7.5 = 0 0 =  8  8.5 = 0 0 =  9  9.5 = 0 0 =
	= 10 10.5 = 0 0 = 11 11.5 = 0 0 = 12 12.5 = 0 0 =
    }
    y 3 8 2 {
	=  1  1.5 =  2  2.5 =  3  3.5 =
	=  0  0   =  0  0   =  0  0   =
	=  4  4.5 =  5  5.5 =  6  6.5 =
	=  0  0   =  0  0   =  0  0   =
	=  7  7.5 =  8  8.5 =  9  9.5 =
	=  0  0   =  0  0   =  0  0   =
	= 10 10.5 = 11 11.5 = 12 12.5 =
	=  0  0   =  0  0   =  0  0   =
    }
    z 3 4 4 {
	=  1 0  1.5 0 =  2 0  2.5 0 =  3 0  3.5 0 =
	=  4 0  4.5 0 =  5 0  5.5 0 =  6 0  6.5 0 =
	=  7 0  7.5 0 =  8 0  8.5 0 =  9 0  9.5 0 =
	= 10 0 10.5 0 = 11 0 11.5 0 = 12 0 12.5 0 =
    }
} {
    unset -nocomplain map
    lappend map /fun    $op
    lappend map /pixels $expected
    lappend map /w      $w
    lappend map /h      $h
    lappend map /d      $d

    test aktive-op-upsample-${op}-2.0 "aktive op upsample $op 2x" -body {
	astcl aktive op upsample $op 2 0 [grad]
    } -match image -result [string map $map {
	type   op::upsample::/fun
	domain {x 0 y 0 width /w height /h depth /d}
	config {n 2 fill 0.0}
	pixels {/pixels}
    }]

    test aktive-op-upsample-${op}-2.1 "aktive op upsample $op, dag" -body {
	dag aktive op upsample $op 2 0 [grad]
    } -match glob -result "op::upsample::$op * {n 2 fill 0.0} {image::gradient *}"

    set in [grad]
    set id [aktive query id $in]

    test aktive-op-upsample-${op}-2.2 "aktive op upsample $op, 1x is identity" -body {
	dag aktive op upsample $op 1 0 $in
    } -match glob -result "image::gradient $id *"

    unset map in id

    test aktive-op-upsample-${op}-2.3 "aktive op upsample $op, chain reduction, factors multiply, for same fill" -body {
	dag aktive op upsample $op 3 0 [aktive op upsample $op 2 0 [grad]]
    } -match glob -result "op::upsample::$op * {n 6 fill 0.0} {image::gradient *}"

    test aktive-op-upsample-${op}-2.4 "aktive op upsample $op, partial view" -body {
	dict get [astcl aktive op select $op 5 10 [aktive op upsample $op 3 0 [grad$op]]] pixels
    } -match pixels -result {0 2 0 0 3 0}
}

# # ## ### ##### ######## ############# #####################
cleanupTests
return
