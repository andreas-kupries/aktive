# -*- tcl -*- tcl.tk//DSL tcltest//EN//2.0 tcl.tk//DSL tcltest//EN//2.0
## (c) 2023 Andreas Kupries
# # ## ### ##### ######## ############# #####################
## AKTIVE. Unary transformers with no parameters

kt check Tcl     8.6
kt check tcltest 2

# # ## ### ##### ######## ############# #####################

kt local testing aktive

kt source support/util.tcl

# # ## ### ##### ######## ############# #####################
## Syntax

syntax {
    abs            src
    ceil           src
    clamp          src
    floor          src
    invert         src
    neg            src
    reciproc       src
    sign           src
    sign*          src
    sqrt           src
    wrap           src
    cbrt           src
    exp            src
    exp2           src
    exp10          src
    log            src
    log2           src
    log10          src
    cos            src
    sin            src
    tan            src
    cosh           src
    sinh           src
    tanh           src
    acos           src
    asin           src
    atan           src
    acosh          src
    asinh          src
    atanh          src
} {aktive op math1}

syntax {
    compress src
    expand   src
} {aktive op math1 gamma}

# # ## ### ##### ######## ############# #####################
##

foreach {fun steps first last expected} {
    floor            7 -1.4 1.6 {-2 -1 -1 0 0 1 1}
    ceil             7 -1.4 1.6 {-1  0  0 1 1 2 2}
    abs              7 -3   3   {3 2 1 0 1 2 3}
    clamp            7 -3   3   {0 0 0 0 1 1 1}
    wrap             7 -1.5 1.5 {0.5 1 0.5 0 0.5 1 0.5}
    invert           7 -1.5 1.5 {2.5 2 1.5 1 0.5 0 -0.5}
    neg              7 -3   3   {3 2 1 0 -1 -2 -3}
    sign             7 -5   5   {-1 -1 -1 0 1 1 1}
    sign*            7 -5   5   {-1 -1 -1 1 1 1 1}
    reciproc         6 -1.5 1.5 {-0.6667 -1.1111 -3.3333 3.3333 1.1111 0.6667}
    sqrt             5  0   4   {0 1 1.41421 1.73205 2}
    cbrt             5  0   4   {0 1 1.25992 1.44225 1.58740}
    exp              5 -4   4   {0.01832 0.13534 1 7.38906 54.59815}
    exp2             5 -4   4   {0.0625 0.25 1 4 16}
    exp10            5 -4   4   {0.0001 0.01 1 100 10000}
    log              4  0.5 2   {-0.69315 0 0.405465 0.69315}
    log2             4  0.5 2   {-1 0 0.58496 1}
    log10            4  0.5 2   {-0.30103 0 0.17609 0.30103}
    cos              7 -5   5   {0.28366 -0.98167 -0.09572 1 -0.09572 -0.98167 0.28366}
    sin              7 -5   5   {0.95892 0.19057 -0.99541 0 0.99541 -0.19057 -0.95892}
    tan              6 -1.5 1.5 {-14.10142 -1.26016 -0.30934 0.30934 1.26016 14.10142}
    cosh             7 -5   5   {74.20995 14.03365 2.74168 1 2.74168 14.03365 74.20995}
    sinh             7 -5   5   {-74.20321 -13.99798 -2.55281 0.0 2.55281 13.99798 74.20321}
    tanh             7 -5   5   {-0.99991 -0.99746 -0.93111 0 0.93111 0.99746 0.99991}
    acos             5 -1   1   {3.141592653589793 2.0944 1.5708 1.0472 0}
    asin             5 -1   1   {-1.5708 -0.5236 0 0.5236 1.5708}
    atan             5 -2   2   {-1.10715 -0.7854 0 0.7854 1.10715}
    acosh            5  1   4   {0 1.15881 1.5668 1.84725 2.06344}
    asinh            5 -2   2   {-1.44364 -0.88137 0 0.88137 1.44364}
    atanh            7 -0.75 0.75 {-0.972955 -0.54931 -0.25541 0 0.25541 0.54931 0.972955}
    {gamma compress} 11 0 1 {0 0.34919 0.48453 0.58383 0.66518 0.73536 0.79774 0.85431 0.90633 0.95469 1}
    {gamma expand}   11 0 1 {0 0.0100 0.0331 0.0732 0.1329 0.21404 0.31855 0.44799 0.60383 0.78741 1}
} {
    if {$steps eq "."} continue ;# skip undefined parts

    # functions to debug ...
    if {$fun in {
    }} {
	puts   "\nXX $fun ........................................................................"
	puts   "XX INPUT [dict get [astcl aktive image gradient $steps 1 1 $first $last] pixels]"
	puts   "XX RESLT [dict get [astcl aktive op math1 $fun [aktive image gradient $steps 1 1 $first $last]] pixels]"
	puts   "XX EXP.. $expected\n"
    }

    test aktive-op-math1-${fun}-2.0 "aktive op math1 $fun (\[$first $last]/$steps)" -body {
	astcl aktive op math1 {*}$fun [aktive image gradient $steps 1 1 $first $last]
    } -match image -result [makei op::math1::[join $fun ::] 0 0 $steps 1 1 {} $expected]

    test aktive-op-math1-${fun}-2.1 "aktive op math1 $fun, dag" -body {
	dag aktive op math1 {*}$fun [grad]
    } -match glob -result "op::math1::[join $fun ::] * {} {image::gradient *}"

    # Const folding is done for most, but not all.
    if {$fun ni {
	{gamma compress}
	{gamma expand}
    }} {
	#	acosh asinh atanh
	set inconst 1
	# For some functions the `1` is either a special case handled before general const folding,
	# or not in the function's domain. For these we select a different suitable value
	catch { set inconst [dict get { reciproc 2 acosh 2 atanh 0.5 } $fun] }

	test aktive-op-math1-${fun}-2.2 "aktive op math1 $fun, const folding, dag" -body {
	    dag aktive op math1 {*}$fun [flat $inconst]
	} -match glob -result {image::constant *}
    }

    # Chain reduction for idempotent operations
    if {$fun in {
	abs ceil clamp floor sign sign* wrap
    }} {
	set fr [aktive op math1 {*}$fun [grad]]
	set id [aktive query id $fr]

	test aktive-op-math1-${fun}-2.3 "aktive op math1 $fun, idempotent, dag" -body {
	    dag aktive op math1 {*}$fun $fr
	} -match glob -result "op::math1::[join $fun ::] $id {} {image::gradient *}"

	unset fr id
    }

    # Chain reduction for complementary operations
    if {$fun in {
	invert neg {gamma expand} {gamma compress}
    }} {
	set cfun [dict get {
	    invert           invert
	    neg		     neg
	    {gamma expand}   {gamma compress}
	    {gamma compress} {gamma expand}
	} $fun]

	test aktive-op-math1-${fun}-2.4 "aktive op math1 $fun, complement $cfun, dag" -body {
	    dag aktive op math1 {*}$cfun [aktive op math1 {*}$fun [grad]]
	} -match glob -result {image::gradient *}

	# Test actual complementariness when reduction is disabled.

	test aktive-op-math1-${fun}-2.5 "aktive op math1 $fun, complement $cfun, round trip" -body {
	    pixels aktive op math1 {*}$cfun [aktive op pass [aktive op math1 {*}$fun [grad]]]
	} -match pixels -result [pixels grad]

	# Note: The inverse order is covered by the test for the other op
	#       If not complementary to itself
    }
}

# # ## ### ##### ######## ############# #####################
## Fix points passing the input through

foreach {k fun fixpoint} {
    0    asin        0.0
    1    atan        0.0
    2    cbrt        0.0
    3    invert      0.5
    4    neg         0.0
    5    reciproc    1.0
    6    sign        0.0
    7    sinh        0.0
    8    sin         0.0
    9    sqrt        0.0
    10   tanh        0.0
    11   tan         0.0
} {
    set in [flat $fixpoint]
    set id [aktive query id $in]

    test aktive-op-math1-${fun}-3.0 "aktive op math1 $fun, fixpoint pass through" -body {
	dag aktive op math1 {*}$fun $in
    } -match glob -result "image::constant $id {* value $fixpoint}"

    unset in id
}

# # ## ### ##### ######## ############# #####################
## More simplifications

test aktive-op-math1-reciproc-4.0 "aktive op math1 reciproc, inverting, cancelling" -body {
    dag aktive op math1 reciproc [aktive op math1 reciproc [grad]]
} -match glob -result "image::gradient *"

# # ## ### ##### ######## ############# #####################
cleanupTests
return
