# -*- tcl -*- tcl.tk//DSL tcltest//EN//2.0 tcl.tk//DSL tcltest//EN//2.0
## (c) 2023 Andreas Kupries
# # ## ### ##### ######## ############# #####################
## AKTIVE. Unary transformers with no parameters

kt check Tcl     8.6
kt check tcltest 2

# # ## ### ##### ######## ############# #####################

kt local testing aktive

kt source support/util.tcl

# # ## ### ##### ######## ############# #####################
## Syntax

syntax {
    abs            src
    clamp          src
    wrap           src
    invert         src
    neg            src
    sign           src
    sign*          src
    reciproc       src
    sqrt           src
    cbrt           src
    exp            src
    exp2           src
    exp10          src
    log            src
    log2           src
    log10          src
    cos            src
    sin            src
    tan            src
    cosh           src
    sinh           src
    tanh           src
    acos           src
    asin           src
    atan           src
    acosh          src
    asinh          src
    atanh          src
    gamma-compress src
    gamma-expand   src
} {aktive op math1}

# # ## ### ##### ######## ############# #####################
##

foreach {k fun steps first last expected} {
    0    abs            7 -3   3   {3 2 1 0 1 2 3}
    1    clamp          7 -3   3   {0 0 0 0 1 1 1}
    2    wrap           7 -1.5 1.5 {0.5 1 0.5 0 0.5 1 0.5}
    3    invert         7 -1.5 1.5 {2.5 2 1.5 1 0.5 0 -0.5}
    4    neg            7 -3   3   {3 2 1 0 -1 -2 -3}
    5    sign           7 -5   5   {-1 -1 -1 0 1 1 1}
    6    sign*          7 -5   5   {-1 -1 -1 1 1 1 1}
    7    reciproc       6 -1.5 1.5 {-0.6667 -1.1111 -3.3333 3.3333 1.1111 0.6667}
    9    sqrt           5  0   4   {0 1 1.41421 1.73205 2}
    10   cbrt           5  0   4   {0 1 1.25992 1.44225 1.58740}
    11   exp            5 -4   4   {0.01832 0.13534 1 7.38906 54.59815}
    12   exp2           5 -4   4   {0.0625 0.25 1 4 16}
    13   exp10          5 -4   4   {0.0001 0.01 1 100 10000}
    14   log            4  0.5 2   {-0.69315 0 0.405465 0.69315}
    15   log2           4  0.5 2   {-1 0 0.58496 1}
    16   log10          4  0.5 2   {-0.30103 0 0.17609 0.30103}
    17   cos            7 -5   5   {0.28366 -0.98167 -0.09572 1 -0.09572 -0.98167 0.28366}
    18   sin            7 -5   5   {0.95892 0.19057 -0.99541 0 0.99541 -0.19057 -0.95892}
    19   tan            6 -1.5 1.5 {-14.10142 -1.26016 -0.30934 0.30934 1.26016 14.10142}
    20   cosh           7 -5   5   {74.20995 14.03365 2.74168 1 2.74168 14.03365 74.20995}
    21   sinh           7 -5   5   {-74.20321 -13.99798 -2.55281 0.0 2.55281 13.99798 74.20321}
    22   tanh           7 -5   5   {-0.99991 -0.99746 -0.93111 0 0.93111 0.99746 0.99991}
    23   acos           5 -1   1   {3.141592653589793 2.0944 1.5708 1.0472 0}
    24   asin           5 -1   1   {-1.5708 -0.5236 0 0.5236 1.5708}
    25   atan           5 -2   2   {-1.10715 -0.7854 0 0.7854 1.10715}
    26   acosh          5  1   4   {0 1.15881 1.5668 1.84725 2.06344}
    27   asinh          5 -2   2   {-1.44364 -0.88137 0 0.88137 1.44364}
    28   atanh          7 -0.75 0.75 {-0.972955 -0.54931 -0.25541 0 0.25541 0.54931 0.972955}
    29   gamma-compress 11 0 1 {0 0.34919 0.48453 0.58383 0.66518 0.73536 0.79774 0.85431 0.90633 0.95469 1}
    30   gamma-expand   11 0 1 {0 0.00774 0.01548 0.02322 0.03096 0.21404 0.31855 0.44799 0.60383 0.78741 1}
} {
    if {$steps eq "."} continue ;# skip undefined parts

    # puts   "\nXX $fun ........................................................................"
    # puts   "XX INPUT [dict get [astcl aktive image gradient $steps 1 1 $first $last] pixels]"
    # puts   "XX RESLT [dict get [astcl aktive op math1 $fun [aktive image gradient $steps 1 1 $first $last]] pixels]"
    # puts   "XX EXP.. $expected\n"

    unset -nocomplain map
    lappend map /fun   $fun
    lappend map /ex    $expected
    lappend map /steps $steps

    test aktive-op-math1-${fun}-2.0 "aktive math1 $fun (\[$first $last]/$steps)" -body {
	astcl aktive op math1 $fun [aktive image gradient $steps 1 1 $first $last]
    } -match image -result [string map $map {
	type   op::math1::/fun
	domain {x 0 y 0 width /steps height 1 depth 1}
	pixels {/ex}
    }]

    test aktive-op-math1-${fun}-2.1 "aktive math1 $fun, dag" -body {
	dag [aktive op math1 $fun [grad]]
    } -result [string map $map {op::math1::/fun image::gradient}]

    # Const folding is done for most, but not all.
    if {$fun ni {
	acosh asinh atanh gamma-compress gamma-expand
    }} {
	test aktive-op-math1-${fun}-2.2 "aktive math1 $fun, const folding, dag" -body {
	    dag [aktive op math1 $fun [flat 1]]
	} -result image::constant
    }

    # Chain reduction for idempotent operations
    if {$fun in {
	abs clamp wrap sign sign*
    }} {
	test aktive-op-math1-${fun}-2.3 "aktive math1 $fun, idempotent, dag" -body {
	    dag [aktive op math1 $fun [aktive op math1 $fun [grad]]]
	} -result [string map $map {op::math1::/fun image::gradient}]
    }

    # Chain reduction for complementary operations
    if {$fun in {
	invert neg gamma-expand gamma-compress
    }} {
	set cfun [dict get {
	    invert          invert
	    neg		    neg
	    gamma-expand    gamma-compress
	    gamma-compress  gamma-expand
	} $fun]

	test aktive-op-math1-${fun}-2.4 "aktive math1 $fun, complement $cfun, dag" -body {
	    dag [aktive op math1 $cfun [aktive op math1 $fun [grad]]]
	} -result image::gradient

	# Note: The inverse order test is covered by the test for the other op
	#       If not self complementary
    }

    unset map
}



# # ## ### ##### ######## ############# #####################
cleanupTests
return
