# -*- tcl -*- tcl.tk//DSL tcltest//EN//2.0 tcl.tk//DSL tcltest//EN//2.0
## (c) 2023 Andreas Kupries
# # ## ### ##### ######## ############# #####################
## AKTIVE. Upsampling rows, columns, bands by replicating pixels.

kt check Tcl     8.6
kt check tcltest 2

# # ## ### ##### ######## ############# #####################

kt local testing aktive

kt source support/util.tcl

# # ## ### ##### ######## ############# #####################
## Syntax

syntax {
    x  {src args}
    xy {src args}
    y  {src args}
    z  {src args}
} {aktive op sample replicate}

# # ## ### ##### ######## ############# #####################
##
# input/gradient 3x4x2
##
##       0 ....   1......   2...... - 3 columns
##     --------  --------  --------
#	 1  1.5    2  2.5    3  3.5  0
#	 4  4.5    5  5.5    6  6.5  1
#	 7  7.5    8  8.5    9  9.5  2
#	10 10.5   11 11.5   12 12.5  3
##     --- ----  --- ----  --- ----  \ 4 rows
##      0. 1...   0. 1...   0. 1... - 2 bands
#
# Upsampling columns, rows, or bands

foreach {op domain expected} {
    x {6 4 2} {
	=  1  1.5 =  1  1.5 =  2  2.5 =  2  2.5 =  3  3.5 =  3  3.5 =
	=  4  4.5 =  4  4.5 =  5  5.5 =  5  5.5 =  6  6.5 =  6  6.5 =
	=  7  7.5 =  7  7.5 =  8  8.5 =  8  8.5 =  9  9.5 =  9  9.5 =
	= 10 10.5 = 10 10.5 = 11 11.5 = 11 11.5 = 12 12.5 = 12 12.5 =
    }
    y {3 8 2} {
	=  1  1.5 =  2  2.5 =  3  3.5 =
	=  1  1.5 =  2  2.5 =  3  3.5 =
	=  4  4.5 =  5  5.5 =  6  6.5 =
	=  4  4.5 =  5  5.5 =  6  6.5 =
	=  7  7.5 =  8  8.5 =  9  9.5 =
	=  7  7.5 =  8  8.5 =  9  9.5 =
	= 10 10.5 = 11 11.5 = 12 12.5 =
	= 10 10.5 = 11 11.5 = 12 12.5 =
    }
    z {3 4 4} {
	=  1  1  1.5  1.5 =  2  2  2.5  2.5 =  3  3  3.5  3.5 =
	=  4  4  4.5  4.5 =  5  5  5.5  5.5 =  6  6  6.5  6.5 =
	=  7  7  7.5  7.5 =  8  8  8.5  8.5 =  9  9  9.5  9.5 =
	= 10 10 10.5 10.5 = 11 11 11.5 11.5 = 12 12 12.5 12.5 =
    }
    xy {6 8 2} {
	=  1  1.5 =  1  1.5 =  2  2.5 =  2  2.5 =  3  3.5 =  3  3.5 =
	=  1  1.5 =  1  1.5 =  2  2.5 =  2  2.5 =  3  3.5 =  3  3.5 =
	=  4  4.5 =  4  4.5 =  5  5.5 =  5  5.5 =  6  6.5 =  6  6.5 =
	=  4  4.5 =  4  4.5 =  5  5.5 =  5  5.5 =  6  6.5 =  6  6.5 =
	=  7  7.5 =  7  7.5 =  8  8.5 =  8  8.5 =  9  9.5 =  9  9.5 =
	=  7  7.5 =  7  7.5 =  8  8.5 =  8  8.5 =  9  9.5 =  9  9.5 =
	= 10 10.5 = 10 10.5 = 11 11.5 = 11 11.5 = 12 12.5 = 12 12.5 =
	= 10 10.5 = 10 10.5 = 11 11.5 = 11 11.5 = 12 12.5 = 12 12.5 =
    }
} {
    set opd $op ; if {$op eq "xy"} { set opd y }

    test aktive-op-sample-replicate-${op}-2.0 "aktive op sample replicate ${op} 2x" -body {
	astcl aktive op sample replicate ${op} [grad] by 2
    } -match image -result [makei op::sample::replicate::${opd} 0 0 {*}$domain {by 2} $expected]

    test aktive-op-sample-replicate-${op}-2.1 "aktive op sample replicate ${op}rep, dag" -body {
	dag aktive op sample replicate ${op} [grad] by 2
    } -match glob -result "op::sample::replicate::${opd} * {by 2} {image::gradient *}"

    set in [grad]
    set id [aktive query id $in]

    test aktive-op-sample-replicate-${op}-2.2 "aktive op sample replicate ${op}rep, 1x is identity" -body {
	dag aktive op sample replicate ${op} $in by 1
    } -match glob -result "image::gradient $id *"

    unset in id

    # xy has no chain reduction yet.
    if {$op eq "xy"} continue

    test aktive-op-sample-replicate-${op}-2.3 "aktive op sample replicate ${op}rep, chain reduction, factors multiply" -body {
	dag aktive op sample replicate ${op} [aktive op sample replicate ${op} [grad] by 2] by 3
    } -match glob -result "op::sample::replicate::${opd} * {by 6} {image::gradient *}"

    test aktive-op-sample-replicate-${op}-2.4 "aktive op sample replicate ${op}rep, partial view" -body {
	dict get [astcl aktive op select $op [aktive op sample replicate ${op} [grad$op] by 3] from 5 to 10] pixels
    } -match pixels -result {1 2 2 2 3 3}
}

# # ## ### ##### ######## ############# #####################
cleanupTests
return
